:root{
    --primary: #d373e3;
    --primary-darken: #862297;
    --primary-lighten: #e190ef;
    --bg:rgb(213, 213, 213);
    --shadow: 2px 0 8px #0000004d;
    --corners: 6px;
    --text-color: #282828;
    --dark: #282828;
    --dark-lighten: #6d6d6d;
    --light: #f5f5f5;
}

body{
    background-color: var(--bg);
    font-family: 'Permanent Marker', cursive;
    font-size: 16pt;
    color: var(--text-color)
}

header{
    margin: 3em 0;
}

img{
    max-width: 100%;
}

button{
    background-color: var(--primary);
    color: var(--light);
    border: 1px solid var(--primary-darken);
    border-radius: var(--corners);
    box-shadow: var(--shadow);
    text-transform: uppercase;
    transition: all .2s ease;
    cursor: pointer; 
    /* ^ This changes the cursor into a hand, typically to indicate that the user can interact with it. */
    padding: 1em;
}   

form{
    margin: 0;
}

input{
    background-color: transparent;
    border: none;
    border-bottom: 1px solid var(--text-color);
    outline: none;
    font-size: 14px;
}

button:hover{
background-color: var(--primary-lighten);
/* This is a pseudo-class that allows a change on the same element on a page,
after a user interacts with it in the given way. */

}

.game-container{
    height: 300px;
}

.pump{
    margin-top: 80px;
    height: 130px;
    width: 180px;
    position: relative;
    align-self: flex-end;
}


.handle{
    height: 10px;
    width: 80px;
    background-color: var(--dark-lighten);
    position: absolute; 
    /* Position absolute and relative change the positions of elements on the page.
    Position relative makes the element the achnor on the page.
    Position absolute changes the position of the element relative to the position of the anchor. */
    top: -80;
    left: 50;
    display: flex;
    justify-content: center;
    transition: all .05s linear;
    z-index: 1;
    /* The z index is the 3-d attribute of an element relative to the user. 
    It cannot be negative, and every element starts with z-index=0.
    Therefore, the positions are decided from a scale 1 and up, with 1 being the second lowest,
    and thereby being behind any element with a higher number.*/
}

.pump:active .handle{
    top: -20px;
}

.handle::before{
    /* This is a pseudo-class. It requires a content and display type section to work.*/
    content: "";
    background-color: var(--dark-lighten);
    width: 10px;
    height: 80px;
    display: block;
}

.pump-box{
    background-color: var(--primary-lighten);
    height: 130px;
    width: 180px;
    border-top-right-radius: 20px;
    border-top-left-radius: 20px;
    z-index: 2;
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    user-select: none;
}

.pump-box span{
    background-color: antiquewhite;
    padding: .5em;
}

.balloon{
    height: 120px;
    width: 100px;
    background-color: blue;
    border-radius: 50%;
    transition: all .2s ease;
    animation: balloon-float 5s ease-in-out infinite;
    align-self: flex-end;
    margin: 0 auto;
    box-shadow: inset -10px -10px 12px #0000004d;
    background: linear-gradient(90deg, #430101 0%, #fa1e01 60%, #ff0000 80%, #ffffff 100%);
}

.balloon.green{
    filter:hue-rotate(130deg)
}

.balloon.blue{
    filter:hue-rotate(225deg)
}

.balloon.purple{
    filter:hue-rotate(225deg)
}

.balloon.pink{
    filter:hue-rotate(325deg)
}

@keyframes balloon-float{
    /* The @ symbol adds animation to the sheet. The percentages represent how far
    through the animation the user is, and what the animation does at those points.*/
    0%, 100%{
        transform: translateY(-25px) rotate(5deg)
    }
    50%{
        transform: translateY(0px) rotate(-5deg)
    }
}

/* Use utility classes as much as possible in css to made your code readable and clean.
You can call these classes in the html when writing classes inside each section. */
.container{
    width: 50%;
    margin: auto;
}


.card{
    background-color: var(--light);
    padding: 1em;
    box-shadow: var(--shadow);
    /* box shadow pixels measured: x axis, y axis, radius
    rgba measured: red (0[none]-255[full]), blue, green, opacity (0[transparent], 1[opaque])*/
    border-radius: var(--corners);
}

.shadow{
    filter: drop-shadow(var(--shadow));
}

.bg-dark{
    background-color: var(--dark);
}

.text-light{
    color: var(--light);
}

.btn-dark{
    background-color: var(--dark-lighten);
    border-color: var(--dark);
}

.btn-dark:hover{
    background-color: var(--dark);
    border-color: var(--dark-lighten);
}

.d-flex{
    display: flex;
    align-items: center;
}

.d-flex.space-between{
    justify-content: space-between;
        /* space between only works when the flex property is used. 
        The title of this class emphasizes their dependence on each other.*/
} 

.d-flex.space-around{
    justify-content: space-around;
}

.mt-1{
    margin-top: .5em;
}

.mt-2{
    margin-top: 1em;
}

.mb-3{
    margin-top: 1.5em;
}

.mb-1{
    margin-bottom: .5em;
}

.mb-2{
    margin-bottom: 1em;
}

.mb-3{
    margin-bottom: 1.5em;
}

.hidden{
    display: none !important
}